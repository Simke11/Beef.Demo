/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options
#pragma warning disable CA2227, CA1819 // Collection/Array properties should be read only; ignored, as acceptable for a DTO.

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Beef.RefData;
using Newtonsoft.Json;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Common.Entities
{
    /// <summary>
    /// Represents the Company entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class Company : EntityBase, IGuidIdentifier, IETag, IChangeLog, IEquatable<Company>
    {
        #region Privates

        private Guid _id;
        private string? _name;
        private string? _address;
        private string? _phone;
        private string? _eTag;
        private ChangeLog? _changeLog;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the <see cref="Company"/> identifier.
        /// </summary>
        [JsonProperty("id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Identifier")]
        public Guid Id
        {
            get => _id;
            set => SetValue(ref _id, value, false, false, nameof(Id)); 
        }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [JsonProperty("name", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Name")]
        public string? Name
        {
            get => _name;
            set => SetValue(ref _name, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Name)); 
        }

        /// <summary>
        /// Gets or sets the Address.
        /// </summary>
        [JsonProperty("address", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Address")]
        public string? Address
        {
            get => _address;
            set => SetValue(ref _address, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Address)); 
        }

        /// <summary>
        /// Gets or sets the Phone.
        /// </summary>
        [JsonProperty("phone", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Phone")]
        public string? Phone
        {
            get => _phone;
            set => SetValue(ref _phone, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Phone)); 
        }

        /// <summary>
        /// Gets or sets the ETag.
        /// </summary>
        [JsonProperty("_etag", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="ETag")]
        public string? ETag
        {
            get => _eTag;
            set => SetValue(ref _eTag, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(ETag)); 
        }

        /// <summary>
        /// Gets or sets the Change Log (see <see cref="ChangeLog"/>).
        /// </summary>
        [JsonProperty("changeLog", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Change Log")]
        public ChangeLog? ChangeLog
        {
            get => _changeLog;
            set => SetValue(ref _changeLog, value, false, true, nameof(ChangeLog)); 
        }

        #endregion

        #region IChangeTracking
          
        /// <summary>
        /// Resets the entity state to unchanged by accepting the changes (resets <see cref="EntityBase.ChangeTracking"/>).
        /// </summary>
        /// <remarks>Ends and commits the entity changes (see <see cref="EntityBase.EndEdit"/>).</remarks>
        public override void AcceptChanges()
        {
            ChangeLog?.AcceptChanges();
            base.AcceptChanges();
        }

        /// <summary>
        /// Determines that until <see cref="AcceptChanges"/> is invoked property changes are to be logged (see <see cref="EntityBase.ChangeTracking"/>).
        /// </summary>
        public override void TrackChanges()
        {
            ChangeLog?.TrackChanges();
            base.TrackChanges();
        }

        #endregion

        #region UniqueKey
      
        /// <summary>
        /// Indicates whether the <see cref="Company"/> has a <see cref="UniqueKey"/> value.
        /// </summary>
        public override bool HasUniqueKey => true;
        
        /// <summary>
        /// Gets the list of property names that represent the unique key.
        /// </summary>
        public override string[] UniqueKeyProperties => new string[] { nameof(Id) };
        
        /// <summary>
        /// Creates the <see cref="UniqueKey"/>.
        /// </summary>
        /// <returns>The <see cref="Beef.Entities.UniqueKey"/>.</returns>
        /// <param name="id">The <see cref="Id"/>.</param>
        public static UniqueKey CreateUniqueKey(Guid id) => new UniqueKey(id);
          
        /// <summary>
        /// Gets the <see cref="UniqueKey"/>.
        /// </summary>
        /// <remarks>
        /// The <b>UniqueKey</b> key consists of the following property(s): <see cref="Id"/>.
        /// </remarks>
        public override UniqueKey UniqueKey => new UniqueKey(Id);

        #endregion

        #region IEquatable

        /// <summary>
        /// Determines whether the specified object is equal to the current object by comparing the values of all the properties.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object? obj)
        {
            if (!(obj is Company val))
                return false;

            return Equals(val);
        }

        /// <summary>
        /// Determines whether the specified <see cref="Company"/> is equal to the current <see cref="Company"/> by comparing the values of all the properties.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public bool Equals(Company? obj)
        {
            if (obj == null)
                return false;
            else if (ReferenceEquals(obj, this))
                return true;

            return base.Equals((object)obj)
                && Equals(Id, obj.Id)
                && Equals(Name, obj.Name)
                && Equals(Address, obj.Address)
                && Equals(Phone, obj.Phone)
                && Equals(ETag, obj.ETag)
                && Equals(ChangeLog, obj.ChangeLog);
        }

        /// <summary>
        /// Compares two <see cref="Company"/> types for equality.
        /// </summary>
        /// <param name="a"><see cref="Company"/> A.</param>
        /// <param name="b"><see cref="Company"/> B.</param>
        /// <returns><c>true</c> indicates equal; otherwise, <c>false</c> for not equal.</returns>
        public static bool operator == (Company? a, Company? b) => Equals(a, b);

        /// <summary>
        /// Compares two <see cref="Company"/> types for non-equality.
        /// </summary>
        /// <param name="a"><see cref="Company"/> A.</param>
        /// <param name="b"><see cref="Company"/> B.</param>
        /// <returns><c>true</c> indicates not equal; otherwise, <c>false</c> for equal.</returns>
        public static bool operator != (Company? a, Company? b) => !Equals(a, b);

        /// <summary>
        /// Returns a hash code for the <see cref="Company"/>.
        /// </summary>
        /// <returns>A hash code for the <see cref="Company"/>.</returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(Id);
            hash.Add(Name);
            hash.Add(Address);
            hash.Add(Phone);
            hash.Add(ETag);
            hash.Add(ChangeLog);
            return base.GetHashCode() ^ hash.ToHashCode();
        }
    
        #endregion
        
        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another <see cref="Company"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="Company"/> to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<Company>(from);
            CopyFrom(fval);
        }
        
        /// <summary>
        /// Performs a copy from another <see cref="Company"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="Company"/> to copy from.</param>
        public void CopyFrom(Company from)
        {
             if (from == null)
                 throw new ArgumentNullException(nameof(from));

            CopyFrom((EntityBase)from);
            Id = from.Id;
            Name = from.Name;
            Address = from.Address;
            Phone = from.Phone;
            ETag = from.ETag;
            ChangeLog = CopyOrClone(from.ChangeLog, ChangeLog);

            OnAfterCopyFrom(from);
        }
    
        #endregion
        
        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the <see cref="Company"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="Company"/>.</returns>
        public override object Clone()
        {
            var clone = new Company();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the <see cref="Company"/> resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
            Id = Cleaner.Clean(Id);
            Name = Cleaner.Clean(Name, StringTrim.UseDefault, StringTransform.UseDefault);
            Address = Cleaner.Clean(Address, StringTrim.UseDefault, StringTransform.UseDefault);
            Phone = Cleaner.Clean(Phone, StringTrim.UseDefault, StringTransform.UseDefault);
            ETag = Cleaner.Clean(ETag, StringTrim.UseDefault, StringTransform.UseDefault);
            ChangeLog = Cleaner.Clean(ChangeLog);

            OnAfterCleanUp();
        }
    
        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
                return Cleaner.IsInitial(Id)
                    && Cleaner.IsInitial(Name)
                    && Cleaner.IsInitial(Address)
                    && Cleaner.IsInitial(Phone)
                    && Cleaner.IsInitial(ETag)
                    && Cleaner.IsInitial(ChangeLog);
            }
        }

        #endregion

        #region PartialMethods
      
        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom(Company from);

        #endregion
    } 

    /// <summary>
    /// Represents a <see cref="Company"/> collection.
    /// </summary>
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Tightly coupled; OK.")]
    public partial class CompanyCollection : EntityBaseCollection<Company>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyCollection"/> class.
        /// </summary>
        public CompanyCollection(){ }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyCollection"/> class with an entity range.
        /// </summary>
        /// <param name="entities">The <see cref="Company"/> entities.</param>
        public CompanyCollection(IEnumerable<Company> entities) => AddRange(entities);

        #endregion

        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the <see cref="CompanyCollection"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="CompanyCollection"/>.</returns>
        public override object Clone()
        {
            var clone = new CompanyCollection();
            foreach (Company item in this)
            {
                clone.Add((Company)item.Clone());
            }
                
            return clone;
        }
        
        #endregion

        #region Operator

        /// <summary>
        /// An implicit cast from a <see cref="CompanyCollectionResult"/> to a <see cref="CompanyCollection"/>.
        /// </summary>
        /// <param name="result">The <see cref="CompanyCollectionResult"/>.</param>
        /// <returns>The corresponding <see cref="CompanyCollection"/>.</returns>
        [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "Improves useability")]
        public static implicit operator CompanyCollection(CompanyCollectionResult result) => result?.Result!;

        #endregion
    }

    /// <summary>
    /// Represents a <see cref="Company"/> collection result.
    /// </summary>
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Tightly coupled; OK.")]
    public class CompanyCollectionResult : EntityCollectionResult<CompanyCollection, Company>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyCollectionResult"/> class.
        /// </summary>
        public CompanyCollectionResult() { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyCollectionResult"/> class with default <see cref="PagingArgs"/>.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public CompanyCollectionResult(PagingArgs? paging) : base(paging) { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyCollectionResult"/> class with a <paramref name="collection"/> of items to add.
        /// </summary>
        /// <param name="collection">A collection containing items to add.</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public CompanyCollectionResult(IEnumerable<Company> collection, PagingArgs? paging = null) : base(paging) => Result.AddRange(collection);
        
        /// <summary>
        /// Creates a deep copy of the <see cref="CompanyCollectionResult"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="CompanyCollectionResult"/>.</returns>
        public override object Clone()
        {
            var clone = new CompanyCollectionResult();
            clone.CopyFrom(this);
            return clone;
        }
    }
}

#pragma warning restore CA2227, CA1819
#pragma warning restore IDE0005
#nullable restore