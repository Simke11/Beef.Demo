/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Beef;
using Beef.Entities;
using Beef.WebApi;
using Newtonsoft.Json.Linq;
using Beef.Demo.Common.Entities;
using Beef.Demo.Common.Agents.ServiceAgents;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Common.Agents
{
    /// <summary>
    /// Provides the Company Web API agent.
    /// </summary>
    public partial class CompanyAgent : WebApiAgentBase, ICompanyServiceAgent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyAgent"/> class.
        /// </summary>
        /// <param name="httpClient">The <see cref="HttpClient"/> (where overridding the default value).</param>
        /// <param name="beforeRequest">The <see cref="Action{HttpRequestMessage}"/> to invoke before the <see cref="HttpRequestMessage">Http Request</see> is made (see <see cref="WebApiServiceAgentBase.BeforeRequest"/>).</param>
        public CompanyAgent(HttpClient? httpClient = null, Action<HttpRequestMessage>? beforeRequest = null)
        {
            CompanyServiceAgent = Beef.Factory.Create<ICompanyServiceAgent>(httpClient, beforeRequest);
        }
        
        /// <summary>
        /// Gets the underlyng <see cref="ICompanyServiceAgent"/> instance.
        /// </summary>
        public ICompanyServiceAgent CompanyServiceAgent { get; private set; }

        /// <summary>
        /// Gets the <see cref="Company"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<Company>> GetAsync(Guid id, WebApiRequestOptions? requestOptions = null)
            => CompanyServiceAgent.GetAsync(id, requestOptions);

        /// <summary>
        /// Creates the <see cref="Company"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Company"/> object.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<Company>> CreateAsync(Company value, WebApiRequestOptions? requestOptions = null)
            => CompanyServiceAgent.CreateAsync(Check.NotNull(value, nameof(value)), requestOptions);

        /// <summary>
        /// Updates the <see cref="Company"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Company"/> object.</param>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<Company>> UpdateAsync(Company value, Guid id, WebApiRequestOptions? requestOptions = null)
            => CompanyServiceAgent.UpdateAsync(Check.NotNull(value, nameof(value)), id, requestOptions);

        /// <summary>
        /// Patches the <see cref="Company"/> object.
        /// </summary>
        /// <param name="patchOption">The <see cref="WebApiPatchOption"/>.</param>
        /// <param name="value">The JSON patch value.</param>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<Company>> PatchAsync(WebApiPatchOption patchOption, JToken value, Guid id, WebApiRequestOptions? requestOptions = null)
            => CompanyServiceAgent.PatchAsync(patchOption, value, id, requestOptions);

        /// <summary>
        /// Deletes the <see cref="Company"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult> DeleteAsync(Guid id, WebApiRequestOptions? requestOptions = null)
            => CompanyServiceAgent.DeleteAsync(id, requestOptions);

        /// <summary>
        /// Gets the <see cref="Company"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<CompanyCollectionResult>> GetAllAsync(WebApiRequestOptions? requestOptions = null)
            => CompanyServiceAgent.GetAllAsync(requestOptions);
    }
}

#pragma warning restore IDE0005
#nullable restore