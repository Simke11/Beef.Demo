/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Data.Database;
using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.Data
{
    /// <summary>
    /// Provides the Company data access.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1052:Static holder types should be Static or NotInheritable", Justification = "Will not always appear static depending on code-gen options")]
    public partial class CompanyData : ICompanyData
    {
        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

        private readonly Func<Guid, IDatabaseArgs, Task>? _getOnBeforeAsync;
        private readonly Func<Company?, Guid, Task>? _getOnAfterAsync;
        private readonly Action<Exception>? _getOnException;

        private readonly Func<Company, IDatabaseArgs, Task>? _createOnBeforeAsync;
        private readonly Func<Company, Task>? _createOnAfterAsync;
        private readonly Action<Exception>? _createOnException;

        private readonly Func<Company, IDatabaseArgs, Task>? _updateOnBeforeAsync;
        private readonly Func<Company, Task>? _updateOnAfterAsync;
        private readonly Action<Exception>? _updateOnException;

        private readonly Func<Guid, IDatabaseArgs, Task>? _deleteOnBeforeAsync;
        private readonly Func<Guid, Task>? _deleteOnAfterAsync;
        private readonly Action<Exception>? _deleteOnException;

        private readonly Action<Exception>? _getAllOnException;

        #pragma warning restore CS0649
        #endregion

        /// <summary>
        /// Gets the <see cref="Company"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        /// <returns>The selected <see cref="Company"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<Company?> GetAsync(Guid id)
        {
            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                Company? __result;
                var __dataArgs = DbMapper.Default.CreateArgs("[Demo].[spCompanyGet]");
                if (_getOnBeforeAsync != null) await _getOnBeforeAsync(id, __dataArgs).ConfigureAwait(false);
                __result = await DemoDb.Default.GetAsync(__dataArgs, id).ConfigureAwait(false);
                if (_getOnAfterAsync != null) await _getOnAfterAsync(__result, id).ConfigureAwait(false);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _getOnException });
        }

        /// <summary>
        /// Creates the <see cref="Company"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Company"/> object.</param>
        /// <returns>A refreshed <see cref="Company"/> object.</returns>
        public Task<Company> CreateAsync(Company value)
        {
            if (value == null)
                throw new ArgumentNullException(nameof(value));

            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                Company __result;
                var __dataArgs = DbMapper.Default.CreateArgs("[Demo].[spCompanyCreate]");
                if (_createOnBeforeAsync != null) await _createOnBeforeAsync(value, __dataArgs).ConfigureAwait(false);
                __result = await DemoDb.Default.CreateAsync(__dataArgs, value).ConfigureAwait(false);
                if (_createOnAfterAsync != null) await _createOnAfterAsync(__result).ConfigureAwait(false);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _createOnException });
        }

        /// <summary>
        /// Updates the <see cref="Company"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Company"/> object.</param>
        /// <returns>A refreshed <see cref="Company"/> object.</returns>
        public Task<Company> UpdateAsync(Company value)
        {
            if (value == null)
                throw new ArgumentNullException(nameof(value));

            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                Company __result;
                var __dataArgs = DbMapper.Default.CreateArgs("[Demo].[spCompanyUpdate]");
                if (_updateOnBeforeAsync != null) await _updateOnBeforeAsync(value, __dataArgs).ConfigureAwait(false);
                __result = await DemoDb.Default.UpdateAsync(__dataArgs, value).ConfigureAwait(false);
                if (_updateOnAfterAsync != null) await _updateOnAfterAsync(__result).ConfigureAwait(false);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _updateOnException });
        }

        /// <summary>
        /// Deletes the <see cref="Company"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        public Task DeleteAsync(Guid id)
        {
            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                var __dataArgs = DbMapper.Default.CreateArgs("[Demo].[spCompanyDelete]");
                if (_deleteOnBeforeAsync != null) await _deleteOnBeforeAsync(id, __dataArgs).ConfigureAwait(false);
                await DemoDb.Default.DeleteAsync(__dataArgs, id).ConfigureAwait(false);
                if (_deleteOnAfterAsync != null) await _deleteOnAfterAsync(id).ConfigureAwait(false);
            }, new BusinessInvokerArgs { ExceptionHandler = _deleteOnException });
        }

        /// <summary>
        /// Gets the <see cref="Company"/> collection object that matches the selection criteria.
        /// </summary>
        /// <returns>A <see cref="CompanyCollectionResult"/>.</returns>
        public Task<CompanyCollectionResult> GetAllAsync()
        {
            return DataInvoker.Default.InvokeAsync(this, () => GetAllOnImplementationAsync(),
                new BusinessInvokerArgs { ExceptionHandler = _getAllOnException });
        }

        /// <summary>
        /// Provides the <see cref="Company"/> entity and database property mapping.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "By design; as there is a direct relationship")]
        public partial class DbMapper : DatabaseMapper<Company, DbMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="DbMapper"/> class.
            /// </summary>
            public DbMapper()
            {
                Property(s => s.Id, "CompanyId").SetUniqueKey(true);
                Property(s => s.Name);
                Property(s => s.Address);
                Property(s => s.Phone);
                AddStandardProperties();
                DbMapperCtor();
            }
            
            /// <summary>
            /// Enables the <see cref="DbMapper"/> constructor to be extended.
            /// </summary>
            partial void DbMapperCtor();
        }
    }
}

#pragma warning restore IDE0005
#nullable restore