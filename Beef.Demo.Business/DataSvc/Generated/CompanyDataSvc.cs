/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Demo.Business.Data;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.DataSvc
{
    /// <summary>
    /// Provides the Company data repository services.
    /// </summary>
    public static partial class CompanyDataSvc
    {
        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

        private static readonly Func<Company?, Guid, Task>? _getOnAfterAsync;
        private static readonly Func<Company, Task>? _createOnAfterAsync;
        private static readonly Func<Company, Task>? _updateOnAfterAsync;
        private static readonly Func<Guid, Task>? _deleteOnAfterAsync;
        private static readonly Func<CompanyCollectionResult, Task>? _getAllOnAfterAsync;

        #pragma warning restore CS0649
        #endregion

        /// <summary>
        /// Gets the <see cref="Company"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        /// <returns>The selected <see cref="Company"/> object where found; otherwise, <c>null</c>.</returns>
        public static Task<Company?> GetAsync(Guid id)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CompanyDataSvc), async () => 
            {
                var __key = new UniqueKey(id);
                if (ExecutionContext.Current.TryGetCacheValue<Company>(__key, out Company __val))
                    return __val;

                var __result = await Factory.Create<ICompanyData>().GetAsync(id).ConfigureAwait(false);
                ExecutionContext.Current.CacheSet(__key, __result!);
                if (_getOnAfterAsync != null) await _getOnAfterAsync(__result, id).ConfigureAwait(false);
                return __result;
            });
        }

        /// <summary>
        /// Creates the <see cref="Company"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Company"/> object.</param>
        /// <returns>A refreshed <see cref="Company"/> object.</returns>
        public static Task<Company> CreateAsync(Company value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CompanyDataSvc), async () => 
            {
                var __result = await Factory.Create<ICompanyData>().CreateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
                await Beef.Events.Event.PublishValueEventAsync(__result, $"Beef.Demo.Company.{__result.Id}", "Create").ConfigureAwait(false);
                ExecutionContext.Current.CacheSet(__result.UniqueKey, __result);
                if (_createOnAfterAsync != null) await _createOnAfterAsync(__result).ConfigureAwait(false);
                return __result;
            });
        }

        /// <summary>
        /// Updates the <see cref="Company"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Company"/> object.</param>
        /// <returns>A refreshed <see cref="Company"/> object.</returns>
        public static Task<Company> UpdateAsync(Company value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CompanyDataSvc), async () => 
            {
                var __result = await Factory.Create<ICompanyData>().UpdateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
                await Beef.Events.Event.PublishValueEventAsync(__result, $"Beef.Demo.Company.{__result.Id}", "Update").ConfigureAwait(false);
                ExecutionContext.Current.CacheSet(__result.UniqueKey, __result);
                if (_updateOnAfterAsync != null) await _updateOnAfterAsync(__result).ConfigureAwait(false);
                return __result;
            });
        }

        /// <summary>
        /// Deletes the <see cref="Company"/> object.
        /// </summary>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        public static Task DeleteAsync(Guid id)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CompanyDataSvc), async () => 
            {
                await Factory.Create<ICompanyData>().DeleteAsync(id).ConfigureAwait(false);
                await Beef.Events.Event.PublishEventAsync($"Beef.Demo.Company.{id}", "Delete", id).ConfigureAwait(false);
                ExecutionContext.Current.CacheRemove<Company>(new UniqueKey(id));
                if (_deleteOnAfterAsync != null) await _deleteOnAfterAsync(id).ConfigureAwait(false);
            });
        }

        /// <summary>
        /// Gets the <see cref="Company"/> collection object that matches the selection criteria.
        /// </summary>
        /// <returns>A <see cref="CompanyCollectionResult"/>.</returns>
        public static Task<CompanyCollectionResult> GetAllAsync()
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CompanyDataSvc), async () => 
            {
                var __result = await Factory.Create<ICompanyData>().GetAllAsync().ConfigureAwait(false);
                if (_getAllOnAfterAsync != null) await _getAllOnAfterAsync(__result).ConfigureAwait(false);
                return __result;
            });
        }
    }
}

#pragma warning restore IDE0005
#nullable restore