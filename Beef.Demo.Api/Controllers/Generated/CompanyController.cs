/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using Beef;
using Beef.AspNetCore.WebApi;
using Beef.Entities;
using Beef.Demo.Business;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Api.Controllers
{
    /// <summary>
    /// Provides the <b>Company</b> API functionality.
    /// </summary>
    [Route("api/v1/companies")]
    public partial class CompanyController : ControllerBase
    {
        /// <summary>
        /// Gets the <see cref="Company"/> entity that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        /// <returns>The selected <see cref="Company"/> entity where found.</returns>
        [HttpGet()]
        [Route("{id}")]
        [ProducesResponseType(typeof(Company), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public IActionResult Get(Guid id)
        {
            return new WebApiGet<Company?>(this, () => Factory.Create<ICompanyManager>().GetAsync(id),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NotFound);
        }

        /// <summary>
        /// Creates the <see cref="Company"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="Company"/> entity.</param>
        /// <returns>The created <see cref="Company"/> entity.</returns>
        [HttpPost()]
        [Route("")]
        [ProducesResponseType(typeof(Company), (int)HttpStatusCode.Created)]
        public IActionResult Create([FromBody] Company value)
        {
            return new WebApiPost<Company>(this, () => Factory.Create<ICompanyManager>().CreateAsync(WebApiActionBase.Value(value)),
                operationType: OperationType.Create, statusCode: HttpStatusCode.Created, alternateStatusCode: null);
        }

        /// <summary>
        /// Updates the <see cref="Company"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="Company"/> entity.</param>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        /// <returns>The updated <see cref="Company"/> entity.</returns>
        [HttpPut()]
        [Route("{id}")]
        [ProducesResponseType(typeof(Company), (int)HttpStatusCode.OK)]
        public IActionResult Update([FromBody] Company value, Guid id)
        {
            return new WebApiPut<Company>(this, () => Factory.Create<ICompanyManager>().UpdateAsync(WebApiActionBase.Value(value), id),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);
        }

        /// <summary>
        /// Patches the <see cref="Company"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="JToken"/> value that contains the patch content for the entity.</param>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        /// <returns>The patched <see cref="Company"/> entity.</returns>
        [HttpPatch()]
        [Route("{id}")]
        [ProducesResponseType(typeof(Company), (int)HttpStatusCode.OK)]
        public IActionResult Patch([FromBody] JToken value, Guid id)
        {
            return new WebApiPatch<Company>(this, value, () => Factory.Create<ICompanyManager>().GetAsync(id), (__value) => Factory.Create<ICompanyManager>().UpdateAsync(__value, id),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);
        }

        /// <summary>
        /// Deletes the <see cref="Company"/> entity that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Company"/> identifier.</param>
        [HttpDelete()]
        [Route("{id}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult Delete(Guid id)
        {
            return new WebApiDelete(this, () => Factory.Create<ICompanyManager>().DeleteAsync(id),
                operationType: OperationType.Delete, statusCode: HttpStatusCode.NoContent);
        }

        /// <summary>
        /// Gets the <see cref="Company"/> collection entity that matches the selection criteria.
        /// </summary>
        /// <returns>A <see cref="CompanyCollection"/>.</returns>
        [HttpGet()]
        [Route("getAll")]
        [ProducesResponseType(typeof(CompanyCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult GetAll()
        {
            return new WebApiGet<CompanyCollectionResult, CompanyCollection, Company>(this, () => Factory.Create<ICompanyManager>().GetAllAsync(),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }
    }
}

#pragma warning restore IDE0005
#nullable restore